import { type NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";
import { api, type RouterOutputs } from "@/utils/api";
import { Header } from "@/components/Header";
import Link from "next/link";
import { useState } from "react";
import { NoteEditor } from "@/components/NoteEditor";
import { NoteCard } from "@/components/NoteCard";

const Home: NextPage = () => {
    return (
        <>
            <Head>
                <title>Notetaker</title>
                <meta
                    name="description"
                    content="Generated by create-t3-app"
                />
                <link
                    rel="icon"
                    href="/favicon.ico"
                />
            </Head>
            <Header />
            <Content />
        </>
    );
};

export default Home;

type Topic = RouterOutputs["topic"]["getAll"][0];
const Content: React.FC = () => {
    const { data: sessionData } = useSession();
    const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
    const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
        undefined, // no input
        {
            enabled: sessionData?.user !== undefined,
            onSuccess: (data) => {
                setSelectedTopic(selectedTopic ?? data[0] ?? null);
            },
        }
    );

    const createTopic = api.topic.create.useMutation({
        onSuccess: () => {
            refetchTopics();
        },
    });

    const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
        {
            topicId: selectedTopic?.id ?? "",
        },
        {
            enabled: sessionData?.user !== undefined && selectedTopic !== null,
        }
    );

    const createNote = api.note.create.useMutation({
        onSuccess: () => {
            refetchNotes();
        },
    });

    const deleteNote = api.note.delete.useMutation({
        onSuccess: () => {
            refetchNotes();
        },
    });

    return (
        <div className="grid grid-cols-4 gap-2 px-5 pt-5">
            <div className="px-2">
                <input
                    type="text"
                    className="input-bordered input input-sm w-full"
                    placeholder="New Topic"
                    onKeyDown={(e) => {
                        if (e.key === "Enter") {
                            createTopic.mutate({
                                title: e.currentTarget.value,
                            });
                            e.currentTarget.value = "";
                        }
                    }}
                />
                <ul className="menu rounded-box w-56 bg-base-100 p-2">
                    {topics?.map((topic) => (
                        <li key={topic.id}>
                            <Link
                                href="#"
                                onClick={(evt) => {
                                    evt.preventDefault();
                                    setSelectedTopic(topic);
                                }}
                            >
                                {topic.title}
                            </Link>
                        </li>
                    ))}
                </ul>
            </div>
            <div className="col-span-3">
                <NoteEditor
                    onSave={({ title, content }) => {
                        createNote.mutate({
                            title,
                            content,
                            topicId: selectedTopic?.id ?? "",
                        });
                    }}
                />
                <div className="mt-4 grid grid-cols-3 gap-4">
                    {notes?.map((note) => {
                        return (
                            <div
                                key={note.id}
                                className="h-full"
                            >
                                <NoteCard
                                    note={note}
                                    onDelete={() =>
                                        deleteNote.mutate({ id: note.id })
                                    }
                                />
                            </div>
                        );
                    })}
                </div>
            </div>
        </div>
    );
};
